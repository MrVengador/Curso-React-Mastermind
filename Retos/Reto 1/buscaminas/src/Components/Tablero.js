import React, { useState } from 'react';
import Celda from './Celda';

function Tablero({ size, time }) { // Se recibe size como prop correctamente
    console.log("Size recibido en Tablero:", size); // Verifica que size se reciba correctamente

    const Tableros = {
        1: [
            "1", "1", "1", "0", "0", "1", "ðŸ’£", "1", "0", "0",
            "1", "1", "2", "2", "1", "0", "1", "ðŸ’£", "ðŸ’£", "1",
            "0", "1", "2", "2", "1", "0", "0", "1", "1", "1",
            "1", "1", "1", "0", "0", "1", "2", "2", "1", "0",
            "1", "ðŸ’£", "1", "0", "0", "1", "ðŸ’£", "1", "0", "0",
            "1", "2", "2", "1", "0", "1", "2", "ðŸ’£", "1", "0",
            "1", "ðŸ’£", "ðŸ’£", "1", "0", "1", "2", "2", "1", "0",
            "1", "2", "2", "1", "0", "0", "1", "ðŸ’£", "1", "0",
            "0", "1", "1", "1", "0", "0", "1", "2", "2", "1",
            "0", "0", "1", "ðŸ’£", "1", "0", "0", "1", "ðŸ’£", "1"
        ],
        2: [
            "0", "1", "1", "1", "0", "0", "0", "1", "ðŸ’£", "1",
            "0", "1", "ðŸ’£", "2", "1", "1", "1", "2", "2", "1",
            "0", "1", "2", "ðŸ’£", "1", "ðŸ’£", "1", "1", "ðŸ’£", "1",
            "0", "0", "1", "1", "1", "2", "2", "1", "1", "1",
            "1", "1", "0", "0", "0", "1", "ðŸ’£", "1", "0", "0",
            "1", "ðŸ’£", "2", "1", "0", "1", "2", "2", "1", "0",
            "1", "2", "ðŸ’£", "1", "0", "1", "ðŸ’£", "ðŸ’£", "1", "0",
            "0", "1", "1", "1", "0", "1", "2", "2", "1", "0",
            "0", "1", "ðŸ’£", "1", "0", "1", "ðŸ’£", "1", "0", "0",
            "0", "1", "1", "1", "0", "1", "1", "1", "0", "0"
        ],
        3: [
            "ðŸ’£", "1", "0", "0", "1", "1", "1", "0", "0", "0",
            "1", "2", "1", "0", "1", "ðŸ’£", "1", "0", "0", "0",
            "0", "1", "ðŸ’£", "1", "1", "2", "2", "1", "0", "0",
            "0", "1", "2", "2", "1", "ðŸ’£", "1", "1", "1", "0",
            "0", "1", "ðŸ’£", "1", "1", "1", "1", "ðŸ’£", "1", "0",
            "0", "1", "1", "1", "0", "0", "1", "2", "2", "1",
            "1", "2", "1", "0", "0", "0", "1", "ðŸ’£", "ðŸ’£", "1",
            "ðŸ’£", "2", "ðŸ’£", "1", "0", "0", "1", "2", "2", "1",
            "1", "3", "ðŸ’£", "1", "0", "1", "2", "ðŸ’£", "2", "1",
            "0", "1", "ðŸ’£", "1", "0", "1", "ðŸ’£", "2", "1", "0"
        ],
        4: [
            "1", "1", "0", "0", "0", "1", "ðŸ’£", "1", "0", "0",
            "1", "ðŸ’£", "1", "0", "0", "1", "2", "2", "1", "0",
            "1", "2", "2", "1", "1", "1", "ðŸ’£", "ðŸ’£", "1", "0",
            "1", "ðŸ’£", "ðŸ’£", "1", "1", "1", "2", "2", "1", "0",
            "1", "2", "2", "1", "0", "0", "0", "1", "ðŸ’£", "1",
            "0", "0", "0", "0", "0", "1", "1", "2", "2", "1",
            "1", "1", "0", "0", "1", "2", "ðŸ’£", "1", "0", "0",
            "1", "ðŸ’£", "1", "0", "1", "ðŸ’£", "2", "1", "0", "0",
            "1", "2", "1", "0", "1", "2", "ðŸ’£", "1", "0", "0",
            "0", "1", "ðŸ’£", "1", "1", "2", "ðŸ’£", "1", "0", "0"
        ],
        5: [
            "1", "ðŸ’£", "1", "0", "1", "2", "2", "1", "0", "0",
            "1", "2", "2", "1", "1", "ðŸ’£", "ðŸ’£", "1", "0", "0",
            "0", "1", "ðŸ’£", "1", "0", "2", "3", "2", "1", "1",
            "1", "2", "2", "1", "0", "1", "ðŸ’£", "ðŸ’£", "2", "ðŸ’£",
            "1", "ðŸ’£", "1", "0", "0", "1", "2", "2", "2", "2",
            "1", "2", "2", "1", "0", "0", "0", "0", "1", "ðŸ’£",
            "ðŸ’£", "1", "1", "1", "1", "1", "1", "1", "2", "2",
            "1", "1", "2", "ðŸ’£", "ðŸ’£", "1", "1", "ðŸ’£", "1", "0",
            "0", "0", "1", "ðŸ’£", "2", "1", "2", "ðŸ’£", "1", "0",
            "0", "0", "1", "1", "1", "0", "1", "1", "1", "0"
        ],
        6: [
            "0", "1", "1", "1", "0", "0", "1", "1", "1", "0",
            "0", "1", "ðŸ’£", "1", "0", "0", "1", "ðŸ’£", "1", "0",
            "0", "1", "2", "2", "1", "1", "2", "2", "2", "1",
            "1", "2", "ðŸ’£", "1", "1", "ðŸ’£", "2", "ðŸ’£", "2", "ðŸ’£",
            "1", "ðŸ’£", "2", "1", "0", "1", "ðŸ’£", "2", "2", "2",
            "1", "2", "ðŸ’£", "1", "0", "1", "ðŸ’£", "1", "0", "0",
            "0", "1", "2", "1", "0", "1", "2", "1", "0", "0",
            "0", "0", "1", "ðŸ’£", "1", "0", "1", "ðŸ’£", "1", "0",
            "0", "0", "1", "1", "1", "0", "1", "2", "2", "1",
            "0", "0", "0", "0", "0", "0", "0", "1", "ðŸ’£", "1"
        ]
    };

    let currentNumTab = 1;
    const CurrentTab = Tableros[currentNumTab];

    let Tab = CurrentTab.map((value, i) => (
        <Celda key={i} value={value}
            addScore={AddScore} />
    ));

    function PaintBoard() {

        // let randomTab = Math.floor(Math.random() * 6) + 1;
        return Math.floor(Math.random() * 6) + 1;

    }


    // Estado para manejar el puntaje
    const [score, setScore] = useState(0);

    function AddScore(points) {
        if (points != -1) {
            setScore(prevScore => prevScore + parseInt(points));
        }

        else {
            setScore(prevScore => 0);
        }
    }

    //Estado de game over

    const [Played, setPlay] = useState(0);

    function GameOver(Death) {
        if (Death) {
            setPlay(true);
        }

    }





    return (
        <div className="bg-dark rounded-5 mt-5">
            <div className='bg-warning-subtle text-dark px-5 py-2 rounded-top-5'>
                <h2 className="text-center">Buscaminas</h2>
                <div className='row p-2 rounded-3'>
                    <h2 className='col-6 bg-light border border-black' id='time'>{time}</h2>
                    <h2 className='col-6 bg-light border border-black' id='score'>{score + " pts"}</h2>
                </div>
            </div>

            {/* Contenedor del tablero donde se colocan las celdas */}
            <div
                className='card p-1 my-5 mx-5'
                id='board'>


                {Tab}
            </div>
        </div>
    );
}

export default Tablero;
