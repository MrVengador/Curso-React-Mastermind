{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crist\\\\OneDrive\\\\Documentos\\\\Programaci\\xF3n\\\\Programaci\\xF3n Web\\\\Frontend\\\\React\\\\Retos\\\\Reto 1\\\\buscaminas\\\\src\\\\Components\\\\Tablero.js\",\n  _s = $RefreshSig$();\nimport React, { use, useState, useEffect } from 'react';\nimport Celda from './Celda';\nimport Timer from './Timer';\nimport Size from './Proporciones';\nimport Score from './Scores';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tablero() {\n  _s();\n  // Se recibe size como prop correctamente\n\n  const [MaxTime, setTime] = useState(0);\n  const [Played, setReset] = useState(false);\n  const [size, setSize] = useState(5);\n  const [ValuesTab, setValuesTab] = useState(Array(25).fill(\" \"));\n  // Estado para manejar el puntaje\n  const [score, setScore] = useState(0); //Inicializo el score en 0\n  const [scoreList, setScoreList] = useState([]);\n  const ListTop = scoreList.map((pts, index) => /*#__PURE__*/_jsxDEV(Score, {\n    score: pts,\n    index: index\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this)); //Agrego la clase playing si se esta jugado\n\n  const adjacentOffsets = [-1,\n  // izquierda\n  1,\n  // derecha\n  -size,\n  // arriba\n  size,\n  // abajo\n  -size - 1,\n  // arriba izquierda\n  -size + 1,\n  // arriba derecha\n  size - 1,\n  // abajo izquierda\n  size + 1 // abajo derecha\n  ];\n  const time = /*#__PURE__*/_jsxDEV(Timer, {\n    MaxTime: MaxTime,\n    Restart: Played\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 18\n  }, this);\n  let currentSize = size; //variable para que solamente se cambie la proporcion al jugar (si es que se altera en medio del juego por curiosidad o etc...)\n  let pause = true;\n  useEffect(() => {\n    console.log(ValuesTab);\n  }, [ValuesTab]); // Este useEffect se ejecuta cuando Restart o MaxTime cambian\n\n  useEffect(() => {\n    setMapValues(Array(currentSize * currentSize).fill(\" \")); //curiosamente si dejo size que se actualizo antes, no lo toma a la primera, por ende se dejo con current size\n    setValuesTab(RandomBombs());\n    ResetPulsado();\n  }, [size]);\n  function RandomBombs() {\n    // o cambiaba cuando se actualizaba el size a otro, o cuando pause era false, lo que no dejaba ver a jugador donde fallo.\n    const bombsCount = Math.floor(Math.random() * Math.floor(size / 2) + 1) + size;\n    console.log(\"Hay \" + bombsCount + \" bombas en el tablero de tama침o \" + size);\n    let newTab = Array(size * size).fill(\" \");\n    let bombPositions = [];\n    for (let i = 0; i < bombsCount; i++) {\n      let randomPos;\n\n      // Para que no se repita la posici칩n\n      do {\n        randomPos = Math.floor(Math.random() * (size * size)); // Corregido a \"size\"\n      } while (bombPositions.includes(randomPos)); // Busca una nueva posici칩n si ya est치 ocupada\n\n      bombPositions.push(randomPos); // A침adir la nueva posici칩n al array\n      newTab[randomPos] = \"游눢\"; // Colocar la bomba en la posici칩n generada\n    }\n\n    // Llamada para contar las bombas adyacentes\n    newTab = countAdjacentBombs(newTab);\n    return newTab;\n  }\n  function countAdjacentBombs(tab) {\n    for (let i = 0; i < tab.length; i++) {\n      // Solo proceder si la celda no contiene una bomba\n      if (tab[i] !== \"游눢\") {\n        let bombCount = 0;\n\n        // Verificar si la celda est치 en el borde o esquina\n        const row = Math.floor(i / size);\n        const col = i % size;\n\n        // Revisar celdas adyacentes\n        for (let offset of adjacentOffsets) {\n          const adjacentIndex = i + offset;\n\n          // Comprobar si la celda adyacente est치 dentro de los l칤mites del tablero\n          // Verifica si la celda adyacente est치 en la misma fila o no est치 fuera de los l칤mites\n          if (adjacentIndex >= 0 && adjacentIndex < tab.length) {\n            const adjacentRow = Math.floor(adjacentIndex / size);\n            const adjacentCol = adjacentIndex % size;\n\n            // Si es una bomba y est치 dentro del borde, contarla\n            if (tab[adjacentIndex] === \"游눢\" && isValidAdjacent(row, col, adjacentRow, adjacentCol)) {\n              bombCount++;\n            }\n          }\n        }\n\n        // Si hay bombas adyacentes, colocar el n칰mero correspondiente\n        if (bombCount > 0) {\n          tab[i] = bombCount.toString(); // Coloca el n칰mero de bombas adyacentes\n        }\n      }\n    }\n    return tab;\n  }\n  function isValidAdjacent(row, col, adjacentRow, adjacentCol) {\n    // Evitar que se cuenten las posiciones fuera del tablero\n    return Math.abs(row - adjacentRow) <= 1 && Math.abs(col - adjacentCol) <= 1;\n  }\n  const sizeController = newSize => {\n    //Es lo mismo que una funcion pero m치s corto, \"recordar\".\n    setSize(newSize);\n    // console.log(\"El nuevo size es :\" + currentSize);\n  };\n\n  //Definir pro, valores componente\n  const [MapValues, setMapValues] = useState(Array(size * size).fill(\" \"));\n  const celdas = MapValues.map((value, index) => /*#__PURE__*/_jsxDEV(Celda, {\n    value: value,\n    id: index,\n    viewValue: viewValue\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this)); //Agrego la clase playing si se esta jugado\n\n  const btnPlayGame = () => {\n    pause = false;\n    console.log(pause + \" en pausa? \");\n    setMapValues(Array(currentSize * currentSize).fill(\" \")); //curiosamente si dejo size que se actualizo antes, no lo toma a la primera, por ende se dejo con current size\n    setValuesTab(RandomBombs(currentSize));\n    setTime(60); // Reiniciar el tiempo a 60 segundos\n    setReset(true); // Establecer el estado a `true` para reiniciar el temporizador\n    ResetPulsado();\n    setScore(0);\n\n    // Despu칠s de un ciclo de renderizado, establecemos `Restart` a `false` para permitir futuros reinicios\n    setTimeout(() => {\n      setReset(false);\n    }, 0); // Este setTimeout con 0 milisegundos asegura que el valor de `Restart` vuelva a `false` inmediatamente despu칠s del renderizado.\n\n    const BoardItem = document.getElementById(\"board\");\n    BoardItem.classList.add(\"Played\");\n  };\n  function TopScores() {\n    if (score !== 0) {\n      // Copia de la lista de puntajes para evitar mutar el estado directamente\n      let PrevScoreList = [...scoreList];\n\n      // Agregar el puntaje actual a la lista\n      PrevScoreList.push(score);\n\n      // Ordenar la lista de mayor a menor\n      PrevScoreList.sort((a, b) => b - a);\n\n      // Mantener solo los 10 mejores puntajes\n      PrevScoreList = PrevScoreList.slice(0, 10);\n\n      // Actualizar el estado con la nueva lista\n      setScoreList(PrevScoreList);\n      console.log(\"Lista de Scores (Top 10): \", PrevScoreList);\n    }\n  }\n  function AddScore(id) {\n    const cellValue = ValuesTab[id]; // Obtiene el valor de la celda\n\n    if (cellValue === \"游눢\") {\n      TopScores();\n      setScore(0); // Si es una bomba, reinicia el puntaje\n      console.log(\"Game Over\");\n      GameOver();\n    } else if (cellValue !== \" \") {\n      console.log(\"Revisando celda \" + id + \" que vale \" + cellValue);\n      setScore(prevScore => prevScore + parseInt(cellValue)); // Usa el estado anterior para actualizar el puntaje\n    }\n  }\n  function viewValue(id) {\n    //ver valor\n\n    const BoardItem = document.getElementById(\"board\");\n    const Item = document.getElementById(id);\n    if (BoardItem.classList.contains(\"Played\") && !Item.classList.contains('pulsado')) {\n      const valoresNuevos = MapValues.slice();\n      const viewAdjacents = viewAdjacentSpaces(ValuesTab, id);\n      for (let cellID of viewAdjacents) {\n        //Para revelar todos los asignados\n\n        const cellElement = document.getElementById(cellID);\n        valoresNuevos[cellID] = ValuesTab[cellID];\n        setMapValues(valoresNuevos);\n        if (cellElement) {\n          cellElement.classList.add('pulsado');\n        }\n      }\n    }\n  }\n  function viewAdjacentSpaces(tab, index) {\n    const points = [];\n    const BFSOrder = [index]; // Cola para BFS\n    const visited = new Set(); // Conjunto para evitar procesar el mismo 칤ndice m치s de una vez\n    visited.add(index);\n    const adjacentOffsets = [-size, size, -1, 1, -size - 1, -size + 1, size - 1, size + 1]; // Ocho direcciones\n\n    while (BFSOrder.length > 0) {\n      const currentIndex = BFSOrder.shift();\n      points.push(currentIndex);\n      const row = Math.floor(currentIndex / size);\n      const col = currentIndex % size;\n      const cellElement = document.getElementById(index);\n      if (!cellElement.classList.contains('pulsado')) {\n        AddScore(currentIndex);\n      }\n      if (tab[currentIndex] === \" \") {\n        for (let offset of adjacentOffsets) {\n          const adjacentIndex = currentIndex + offset;\n          const adjacentRow = Math.floor(adjacentIndex / size);\n          const adjacentCol = adjacentIndex % size;\n\n          // Verificar que la celda adyacente est치 dentro de los l칤mites y es v치lida\n          if (adjacentIndex >= 0 && adjacentIndex < tab.length && isValidAdjacent(row, col, adjacentRow, adjacentCol) && !visited.has(adjacentIndex) && tab[adjacentIndex] !== \"游눢\") {\n            visited.add(adjacentIndex);\n            BFSOrder.push(adjacentIndex);\n          }\n        }\n      }\n    }\n    return points;\n  }\n\n  //Estado de game over\n  function GameOver() {\n    console.log(pause + \"en pausa? Game over\");\n    setReset(true); // Establecer el estado a `true` para reiniciar el temporizador\n    setTime(0);\n    pause = true;\n    const BoardItem = document.getElementById(\"board\");\n    BoardItem.classList.remove(\"Played\");\n  }\n  function ResetPulsado() {\n    const Items = document.getElementsByClassName(\"cell\");\n    for (let i = 0; i < Items.length; i++) {\n      Items[i].classList.remove('pulsado');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container_Game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-dark rounded-5 mt-5 p-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 card\",\n        id: \"Top_Scores\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-center\",\n          children: \"Top Score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3\",\n          id: \"ListTopScores\",\n          children: ListTop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-dark rounded-5 mt-5 col\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-warning-subtle text-dark px-5 py-2 rounded-top-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-center\",\n          children: \"Buscaminas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row p-2 rounded-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"col-6 bg-light border border-black \",\n            id: \"time\",\n            children: time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"col-6 bg-light border border-black \",\n            id: \"score\",\n            children: score + \" pts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card p-1 mt-5 mb-4 mx-5 \",\n        id: \"board\",\n        style: {\n          gridTemplateRows: `repeat(${size}, 1fr)`,\n          gridTemplateColumns: `repeat(${size}, 0fr)`\n        },\n        children: celdas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Size, {\n          setBoardSize: sizeController\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success px-5 mb-3\",\n          onClick: btnPlayGame,\n          children: \"Jugar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 9\n  }, this);\n}\n_s(Tablero, \"VlZxUp6Plq4FMJPWOtVU1HbMSHo=\");\n_c = Tablero;\nexport default Tablero;\nvar _c;\n$RefreshReg$(_c, \"Tablero\");","map":{"version":3,"names":["React","use","useState","useEffect","Celda","Timer","Size","Score","jsxDEV","_jsxDEV","Tablero","_s","MaxTime","setTime","Played","setReset","size","setSize","ValuesTab","setValuesTab","Array","fill","score","setScore","scoreList","setScoreList","ListTop","map","pts","index","fileName","_jsxFileName","lineNumber","columnNumber","adjacentOffsets","time","Restart","currentSize","pause","console","log","setMapValues","RandomBombs","ResetPulsado","bombsCount","Math","floor","random","newTab","bombPositions","i","randomPos","includes","push","countAdjacentBombs","tab","length","bombCount","row","col","offset","adjacentIndex","adjacentRow","adjacentCol","isValidAdjacent","toString","abs","sizeController","newSize","MapValues","celdas","value","id","viewValue","btnPlayGame","setTimeout","BoardItem","document","getElementById","classList","add","TopScores","PrevScoreList","sort","a","b","slice","AddScore","cellValue","GameOver","prevScore","parseInt","Item","contains","valoresNuevos","viewAdjacents","viewAdjacentSpaces","cellID","cellElement","points","BFSOrder","visited","Set","currentIndex","shift","has","remove","Items","getElementsByClassName","children","className","style","gridTemplateRows","gridTemplateColumns","setBoardSize","onClick","_c","$RefreshReg$"],"sources":["C:/Users/crist/OneDrive/Documentos/Programaci칩n/Programaci칩n Web/Frontend/React/Retos/Reto 1/buscaminas/src/Components/Tablero.js"],"sourcesContent":["import React, { use, useState, useEffect } from 'react';\r\nimport Celda from './Celda';\r\nimport Timer from './Timer';\r\nimport Size from './Proporciones'\r\nimport Score from './Scores';\r\n\r\nfunction Tablero() { // Se recibe size como prop correctamente\r\n\r\n    const [MaxTime, setTime] = useState(0);\r\n    const [Played, setReset] = useState(false);\r\n    const [size, setSize] = useState(5);\r\n    const [ValuesTab, setValuesTab] = useState(Array(25).fill(\" \"));\r\n    // Estado para manejar el puntaje\r\n    const [score, setScore] = useState(0); //Inicializo el score en 0\r\n    const [scoreList, setScoreList] = useState([]);\r\n\r\n    const ListTop = scoreList.map((pts, index) =>\r\n        <Score key={index} score={pts} index={index} />); //Agrego la clase playing si se esta jugado\r\n\r\n    const adjacentOffsets = [\r\n        -1,  // izquierda\r\n        1,   // derecha\r\n        -size, // arriba\r\n        size,  // abajo\r\n        -size - 1, // arriba izquierda\r\n        -size + 1, // arriba derecha\r\n        size - 1, // abajo izquierda\r\n        size + 1, // abajo derecha\r\n    ];\r\n\r\n\r\n    const time = <Timer MaxTime={MaxTime} Restart={Played} />;\r\n    let currentSize = size; //variable para que solamente se cambie la proporcion al jugar (si es que se altera en medio del juego por curiosidad o etc...)\r\n    let pause = true;\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(ValuesTab);\r\n\r\n    }, [ValuesTab]); // Este useEffect se ejecuta cuando Restart o MaxTime cambian\r\n\r\n    useEffect(() => {\r\n\r\n        setMapValues(Array(currentSize * currentSize).fill(\" \")); //curiosamente si dejo size que se actualizo antes, no lo toma a la primera, por ende se dejo con current size\r\n        setValuesTab(RandomBombs());\r\n        ResetPulsado();\r\n\r\n    }, [size]);\r\n\r\n\r\n    function RandomBombs() {\r\n        // o cambiaba cuando se actualizaba el size a otro, o cuando pause era false, lo que no dejaba ver a jugador donde fallo.\r\n        const bombsCount = Math.floor(Math.random() * Math.floor(size / 2) + 1) + size;\r\n        console.log(\"Hay \" + bombsCount + \" bombas en el tablero de tama침o \" + size);\r\n\r\n        let newTab = Array(size * size).fill(\" \");\r\n        let bombPositions = [];\r\n\r\n        for (let i = 0; i < bombsCount; i++) {\r\n            let randomPos;\r\n\r\n            // Para que no se repita la posici칩n\r\n            do {\r\n                randomPos = Math.floor(Math.random() * (size * size)); // Corregido a \"size\"\r\n            } while (bombPositions.includes(randomPos)); // Busca una nueva posici칩n si ya est치 ocupada\r\n\r\n            bombPositions.push(randomPos); // A침adir la nueva posici칩n al array\r\n            newTab[randomPos] = \"游눢\"; // Colocar la bomba en la posici칩n generada\r\n        }\r\n\r\n        // Llamada para contar las bombas adyacentes\r\n        newTab = countAdjacentBombs(newTab);\r\n        return newTab;\r\n    }\r\n\r\n    function countAdjacentBombs(tab) {\r\n        for (let i = 0; i < tab.length; i++) {\r\n            // Solo proceder si la celda no contiene una bomba\r\n            if (tab[i] !== \"游눢\") {\r\n                let bombCount = 0;\r\n\r\n                // Verificar si la celda est치 en el borde o esquina\r\n                const row = Math.floor(i / size);\r\n                const col = i % size;\r\n\r\n                // Revisar celdas adyacentes\r\n                for (let offset of adjacentOffsets) {\r\n                    const adjacentIndex = i + offset;\r\n\r\n                    // Comprobar si la celda adyacente est치 dentro de los l칤mites del tablero\r\n                    // Verifica si la celda adyacente est치 en la misma fila o no est치 fuera de los l칤mites\r\n                    if (adjacentIndex >= 0 && adjacentIndex < tab.length) {\r\n                        const adjacentRow = Math.floor(adjacentIndex / size);\r\n                        const adjacentCol = adjacentIndex % size;\r\n\r\n                        // Si es una bomba y est치 dentro del borde, contarla\r\n                        if (tab[adjacentIndex] === \"游눢\" && isValidAdjacent(row, col, adjacentRow, adjacentCol)) {\r\n                            bombCount++;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Si hay bombas adyacentes, colocar el n칰mero correspondiente\r\n                if (bombCount > 0) {\r\n                    tab[i] = bombCount.toString(); // Coloca el n칰mero de bombas adyacentes\r\n                }\r\n            }\r\n        }\r\n\r\n        return tab;\r\n    }\r\n\r\n\r\n    function isValidAdjacent(row, col, adjacentRow, adjacentCol) {\r\n        // Evitar que se cuenten las posiciones fuera del tablero\r\n        return Math.abs(row - adjacentRow) <= 1 && Math.abs(col - adjacentCol) <= 1;\r\n    }\r\n\r\n\r\n\r\n    const sizeController = (newSize) => { //Es lo mismo que una funcion pero m치s corto, \"recordar\".\r\n        setSize(newSize);\r\n        // console.log(\"El nuevo size es :\" + currentSize);\r\n    };\r\n\r\n\r\n\r\n    //Definir pro, valores componente\r\n    const [MapValues, setMapValues] = useState(Array(size * size).fill(\" \"));\r\n    const celdas = MapValues.map((value, index) =>\r\n        <Celda key={index} value={value} id={index} viewValue={viewValue} />); //Agrego la clase playing si se esta jugado\r\n\r\n\r\n\r\n\r\n    const btnPlayGame = () => {\r\n        pause = false;\r\n\r\n        console.log(pause + \" en pausa? \");\r\n        setMapValues(Array(currentSize * currentSize).fill(\" \")); //curiosamente si dejo size que se actualizo antes, no lo toma a la primera, por ende se dejo con current size\r\n        setValuesTab(RandomBombs(currentSize));\r\n\r\n\r\n        setTime(60);  // Reiniciar el tiempo a 60 segundos\r\n        setReset(true);  // Establecer el estado a `true` para reiniciar el temporizador\r\n        ResetPulsado();\r\n        setScore(0);\r\n\r\n        // Despu칠s de un ciclo de renderizado, establecemos `Restart` a `false` para permitir futuros reinicios\r\n        setTimeout(() => {\r\n            setReset(false);\r\n        }, 0);  // Este setTimeout con 0 milisegundos asegura que el valor de `Restart` vuelva a `false` inmediatamente despu칠s del renderizado.\r\n\r\n        const BoardItem = document.getElementById(\"board\")\r\n        BoardItem.classList.add(\"Played\");\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function TopScores() {\r\n        if (score !== 0) {\r\n\r\n            // Copia de la lista de puntajes para evitar mutar el estado directamente\r\n            let PrevScoreList = [...scoreList];\r\n\r\n            // Agregar el puntaje actual a la lista\r\n            PrevScoreList.push(score);\r\n\r\n            // Ordenar la lista de mayor a menor\r\n            PrevScoreList.sort((a, b) => b - a);\r\n\r\n            // Mantener solo los 10 mejores puntajes\r\n            PrevScoreList = PrevScoreList.slice(0, 10);\r\n\r\n            // Actualizar el estado con la nueva lista\r\n            setScoreList(PrevScoreList);\r\n\r\n            console.log(\"Lista de Scores (Top 10): \", PrevScoreList);\r\n        }\r\n    }\r\n\r\n\r\n    function AddScore(id) {\r\n        const cellValue = ValuesTab[id]; // Obtiene el valor de la celda\r\n\r\n        if (cellValue === \"游눢\") {\r\n            TopScores();\r\n            setScore(0); // Si es una bomba, reinicia el puntaje\r\n            console.log(\"Game Over\");\r\n            GameOver();\r\n        }\r\n        else if (cellValue !== \" \") {\r\n            console.log(\"Revisando celda \" + id + \" que vale \" + cellValue);\r\n\r\n            setScore(prevScore => prevScore + parseInt(cellValue)); // Usa el estado anterior para actualizar el puntaje\r\n        }\r\n    }\r\n\r\n\r\n    function viewValue(id) { //ver valor\r\n\r\n        const BoardItem = document.getElementById(\"board\")\r\n        const Item = document.getElementById(id);\r\n\r\n\r\n        if (BoardItem.classList.contains(\"Played\") && !Item.classList.contains('pulsado')) {\r\n\r\n            const valoresNuevos = MapValues.slice();\r\n\r\n\r\n            const viewAdjacents = viewAdjacentSpaces(ValuesTab, id);\r\n\r\n            for (let cellID of viewAdjacents) { //Para revelar todos los asignados\r\n\r\n                const cellElement = document.getElementById(cellID);\r\n\r\n                valoresNuevos[cellID] = ValuesTab[cellID];\r\n                setMapValues(valoresNuevos);\r\n\r\n                if (cellElement) {\r\n                    cellElement.classList.add('pulsado');\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function viewAdjacentSpaces(tab, index) {\r\n        const points = [];\r\n        const BFSOrder = [index]; // Cola para BFS\r\n        const visited = new Set(); // Conjunto para evitar procesar el mismo 칤ndice m치s de una vez\r\n        visited.add(index);\r\n\r\n        const adjacentOffsets = [-size, size, -1, 1, -size - 1, -size + 1, size - 1, size + 1]; // Ocho direcciones\r\n\r\n        while (BFSOrder.length > 0) {\r\n            const currentIndex = BFSOrder.shift();\r\n            points.push(currentIndex);\r\n\r\n            const row = Math.floor(currentIndex / size);\r\n            const col = currentIndex % size;\r\n            const cellElement = document.getElementById(index);\r\n\r\n            if (!cellElement.classList.contains('pulsado')) {\r\n                AddScore(currentIndex);\r\n            }\r\n\r\n            if (tab[currentIndex] === \" \") {\r\n                for (let offset of adjacentOffsets) {\r\n                    const adjacentIndex = currentIndex + offset;\r\n                    const adjacentRow = Math.floor(adjacentIndex / size);\r\n                    const adjacentCol = adjacentIndex % size;\r\n\r\n                    // Verificar que la celda adyacente est치 dentro de los l칤mites y es v치lida\r\n                    if (\r\n                        adjacentIndex >= 0 && adjacentIndex < tab.length &&\r\n                        isValidAdjacent(row, col, adjacentRow, adjacentCol) &&\r\n                        !visited.has(adjacentIndex) && tab[adjacentIndex] !== \"游눢\"\r\n                    ) {\r\n                        visited.add(adjacentIndex);\r\n                        BFSOrder.push(adjacentIndex);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return points;\r\n    }\r\n\r\n\r\n\r\n\r\n    //Estado de game over\r\n    function GameOver() {\r\n        console.log(pause + \"en pausa? Game over\");\r\n\r\n        setReset(true);  // Establecer el estado a `true` para reiniciar el temporizador\r\n        setTime(0);\r\n        pause = true;\r\n        const BoardItem = document.getElementById(\"board\")\r\n        BoardItem.classList.remove(\"Played\");\r\n    }\r\n\r\n    function ResetPulsado() {\r\n        const Items = document.getElementsByClassName(\"cell\");\r\n\r\n        for (let i = 0; i < Items.length; i++) {\r\n            Items[i].classList.remove('pulsado');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div id='container_Game'>\r\n            <div className=\"bg-dark rounded-5 mt-5 p-5\">\r\n                <div className='p-3 card' id='Top_Scores'>\r\n                    <h2 className=\"text-center\">Top Score</h2>\r\n                    <div className='p-3' id='ListTopScores'>\r\n                        {ListTop}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"bg-dark rounded-5 mt-5 col\">\r\n                <div className='bg-warning-subtle text-dark px-5 py-2 rounded-top-5'>\r\n                    <h2 className=\"text-center\">Buscaminas</h2>\r\n                    <div className='row p-2 rounded-3'>\r\n                        <h2 className='col-6 bg-light border border-black ' id='time'>{time}</h2>\r\n                        <h2 className='col-6 bg-light border border-black ' id='score'>{score + \" pts\"}</h2>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='card p-1 mt-5 mb-4 mx-5 '\r\n                    id='board' style={{\r\n                        gridTemplateRows: `repeat(${size}, 1fr)`,\r\n                        gridTemplateColumns: `repeat(${size}, 0fr)`,\r\n                    }}>\r\n                    {celdas}\r\n                </div>\r\n                <div>\r\n                    <Size setBoardSize={sizeController} />\r\n\r\n                    <button className='btn btn-success px-5 mb-3'\r\n                        onClick={btnPlayGame}>\r\n                        Jugar\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tablero;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}