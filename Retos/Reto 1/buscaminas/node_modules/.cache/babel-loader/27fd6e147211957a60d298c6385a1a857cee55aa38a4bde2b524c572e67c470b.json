{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crist\\\\OneDrive\\\\Documentos\\\\Programaci\\xF3n\\\\Programaci\\xF3n Web\\\\Frontend\\\\React\\\\Retos\\\\Reto 1\\\\buscaminas\\\\src\\\\Components\\\\Celda.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Celda({\n  id,\n  value,\n  addScore,\n  view,\n  onGameOver\n}) {\n  _s();\n  const [ver, setView] = useState(view); // Se inicializa con el valor recibido por props\n\n  const handleClick = () => {\n    if (!ver) {\n      setView(true); // Muestra el valor cuando se hace clic\n      if (value === \"💣\") {\n        addScore(-1, id); // Penaliza por muerte\n        alert(\"GAME OVER\");\n        onGameOver(); // Llama la función de fin del juego para ocultar todas las celdas\n      } else {\n        addScore(value, id); // Suma el valor\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: 50,\n      height: 50\n    },\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"cell\",\n      id: id,\n      onClick: handleClick,\n      children: [ver ? value : \" \", \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_s(Celda, \"pA/M04SJ+9NcDF9BjIvtFPXxwuY=\");\n_c = Celda;\nexport default Celda;\nvar _c;\n$RefreshReg$(_c, \"Celda\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Celda","id","value","addScore","view","onGameOver","_s","ver","setView","handleClick","alert","style","width","height","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/crist/OneDrive/Documentos/Programación/Programación Web/Frontend/React/Retos/Reto 1/buscaminas/src/Components/Celda.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Celda({ id, value, addScore, view, onGameOver }) {\r\n\r\n    const [ver, setView] = useState(view); // Se inicializa con el valor recibido por props\r\n\r\n    const handleClick = () => {\r\n        if (!ver) {\r\n            setView(true);  // Muestra el valor cuando se hace clic\r\n            if (value === \"💣\") {\r\n                addScore(-1, id); // Penaliza por muerte\r\n                alert(\"GAME OVER\");\r\n                onGameOver(); // Llama la función de fin del juego para ocultar todas las celdas\r\n            } else {\r\n                addScore(value, id); // Suma el valor\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ width: 50, height: 50 }}>\r\n            <button className=\"cell\" id={id} onClick={handleClick}>\r\n                {ver ? value : \" \"}  {/* Si 'ver' es true, muestra el valor, si es false, muestra \" \" */}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Celda;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,KAAKA,CAAC;EAAEC,EAAE;EAAEC,KAAK;EAAEC,QAAQ;EAAEC,IAAI;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EAEtD,MAAM,CAACC,GAAG,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC;;EAEvC,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAI,CAACF,GAAG,EAAE;MACNC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAE;MAChB,IAAIN,KAAK,KAAK,IAAI,EAAE;QAChBC,QAAQ,CAAC,CAAC,CAAC,EAAEF,EAAE,CAAC,CAAC,CAAC;QAClBS,KAAK,CAAC,WAAW,CAAC;QAClBL,UAAU,CAAC,CAAC,CAAC,CAAC;MAClB,CAAC,MAAM;QACHF,QAAQ,CAACD,KAAK,EAAED,EAAE,CAAC,CAAC,CAAC;MACzB;IACJ;EACJ,CAAC;EAED,oBACIF,OAAA;IAAKY,KAAK,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAG,CAAE;IAAAC,QAAA,eAClCf,OAAA;MAAQgB,SAAS,EAAC,MAAM;MAACd,EAAE,EAAEA,EAAG;MAACe,OAAO,EAAEP,WAAY;MAAAK,QAAA,GACjDP,GAAG,GAAGL,KAAK,GAAG,GAAG,EAAC,IAAE;IAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd;AAACd,EAAA,CAxBQN,KAAK;AAAAqB,EAAA,GAALrB,KAAK;AA0Bd,eAAeA,KAAK;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}