{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crist\\\\OneDrive\\\\Documentos\\\\Programaci\\xF3n\\\\Programaci\\xF3n Web\\\\Frontend\\\\React\\\\Retos\\\\Reto 1\\\\buscaminas\\\\src\\\\Components\\\\Tablero.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Celda from './Celda';\nimport Timer from './Timer';\nimport Size from './Proporciones';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tablero() {\n  _s();\n  const [MaxTime, setTime] = useState(0);\n  const [Played, setReset] = useState(false);\n  const [size, setSize] = useState(5); // tama침o inicial del tablero\n  const [ValuesTab, setValuesTab] = useState(Array(25).fill(\" \")); // valores de las celdas (bombas y vac칤as)\n\n  const time = /*#__PURE__*/_jsxDEV(Timer, {\n    MaxTime: MaxTime,\n    Restart: Played\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 18\n  }, this);\n\n  // Para manejar el cambio del tama침o y regenerar el tablero\n  useEffect(() => {\n    // Cada vez que cambia el tama침o, reinicia el tablero y las bombas\n    setValuesTab(RandomBombs());\n  }, [size]); // Se ejecuta cuando `size` cambia\n\n  function RandomBombs() {\n    const bombsCount = Math.floor(Math.random() * size) + 1;\n    console.log(\"Hay \" + bombsCount + \" bombas en el tablero.\");\n    let newTab = Array(size * size).fill(\" \");\n    let bombPositions = [];\n\n    // Coloca las bombas en el tablero\n    for (let i = 0; i < bombsCount; i++) {\n      let randomPos;\n\n      // Para que no se repita la posici칩n\n      do {\n        randomPos = Math.floor(Math.random() * (size * size));\n      } while (bombPositions.includes(randomPos)); // Busca una nueva posici칩n si ya est치 ocupada\n\n      bombPositions.push(randomPos); // A침adir la nueva posici칩n al array\n      newTab[randomPos] = \"游눢\"; // Colocar la bomba en la posici칩n generada\n    }\n    return newTab;\n  }\n\n  // Controlador del tama침o del tablero (conjunto de celdas)\n  const sizeController = newSize => {\n    setSize(newSize); // Actualiza el tama침o del tablero\n    console.log(\"El nuevo tama침o es: \" + newSize);\n  };\n\n  // Genera las celdas del tablero\n  const [MapValues, setMapValues] = useState(Array(size * size).fill(\" \"));\n  const celdas = MapValues.map((value, index) => /*#__PURE__*/_jsxDEV(Celda, {\n    value: value,\n    id: index,\n    addScore: AddScore\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this));\n\n  // Funci칩n para empezar el juego\n  const btnPlayGame = () => {\n    setTime(60); // Reiniciar el tiempo a 60 segundos\n    setReset(true); // Reiniciar el temporizador\n\n    // Despu칠s de un ciclo de renderizado, establecemos `Restart` a `false` para permitir futuros reinicios\n    setTimeout(() => {\n      setReset(false);\n    }, 0); // Este setTimeout con 0 milisegundos asegura que el valor de `Restart` vuelva a `false` inmediatamente despu칠s del renderizado.\n\n    console.log(\"Timer: \" + MaxTime);\n  };\n\n  // Estado para manejar el puntaje\n  const [score, setScore] = useState(0); // Inicializo el score en 0\n\n  function AddScore(id) {\n    if (Played == false) {\n      const cellValue = ValuesTab[id]; // Obtiene el valor de la celda\n      console.log(\"cell \" + id + \": \" + cellValue);\n      if (cellValue === \"游눢\") {\n        setScore(0); // Si es una bomba, reinicia el puntaje\n        console.log(\"Game Over\");\n        GameOver();\n      } else {\n        if (cellValue !== \" \") {\n          setScore(parseInt(score) + parseInt(cellValue));\n        }\n      }\n    }\n  }\n  function GameOver() {\n    setReset(true); // Establecer el estado a `true` para reiniciar el temporizador\n    setTime(0); // Reiniciar el temporizador\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-dark rounded-5 mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-warning-subtle text-dark px-5 py-2 rounded-top-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center\",\n        children: \"Buscaminas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row p-2 rounded-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"col-6 bg-light border border-black \",\n          id: \"time\",\n          children: time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"col-6 bg-light border border-black \",\n          id: \"score\",\n          children: score + \" pts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card p-1 mt-5 mb-4 mx-5 \",\n      id: \"board\",\n      style: {\n        gridTemplateRows: `repeat(${size}, 1fr)`,\n        gridTemplateColumns: `repeat(${size}, 1fr)`\n      },\n      children: celdas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Size, {\n        setBoardSize: sizeController\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success px-5 mb-3\",\n        onClick: btnPlayGame,\n        children: \"Jugar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n_s(Tablero, \"DUSS/6JLdOXT3CQlmyaa3F/6iYc=\");\n_c = Tablero;\nexport default Tablero;\nvar _c;\n$RefreshReg$(_c, \"Tablero\");","map":{"version":3,"names":["React","useState","useEffect","Celda","Timer","Size","jsxDEV","_jsxDEV","Tablero","_s","MaxTime","setTime","Played","setReset","size","setSize","ValuesTab","setValuesTab","Array","fill","time","Restart","fileName","_jsxFileName","lineNumber","columnNumber","RandomBombs","bombsCount","Math","floor","random","console","log","newTab","bombPositions","i","randomPos","includes","push","sizeController","newSize","MapValues","setMapValues","celdas","map","value","index","id","addScore","AddScore","btnPlayGame","setTimeout","score","setScore","cellValue","GameOver","parseInt","className","children","style","gridTemplateRows","gridTemplateColumns","setBoardSize","onClick","_c","$RefreshReg$"],"sources":["C:/Users/crist/OneDrive/Documentos/Programaci칩n/Programaci칩n Web/Frontend/React/Retos/Reto 1/buscaminas/src/Components/Tablero.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Celda from './Celda';\r\nimport Timer from './Timer';\r\nimport Size from './Proporciones';\r\n\r\nfunction Tablero() {\r\n    const [MaxTime, setTime] = useState(0);\r\n    const [Played, setReset] = useState(false);\r\n    const [size, setSize] = useState(5);  // tama침o inicial del tablero\r\n    const [ValuesTab, setValuesTab] = useState(Array(25).fill(\" \"));  // valores de las celdas (bombas y vac칤as)\r\n\r\n    const time = <Timer MaxTime={MaxTime} Restart={Played} />;\r\n\r\n    // Para manejar el cambio del tama침o y regenerar el tablero\r\n    useEffect(() => {\r\n        // Cada vez que cambia el tama침o, reinicia el tablero y las bombas\r\n        setValuesTab(RandomBombs());\r\n    }, [size]); // Se ejecuta cuando `size` cambia\r\n\r\n    function RandomBombs() {\r\n        const bombsCount = Math.floor(Math.random() * size) + 1;\r\n        console.log(\"Hay \" + bombsCount + \" bombas en el tablero.\");\r\n\r\n        let newTab = Array(size * size).fill(\" \");\r\n        let bombPositions = [];\r\n\r\n        // Coloca las bombas en el tablero\r\n        for (let i = 0; i < bombsCount; i++) {\r\n            let randomPos;\r\n\r\n            // Para que no se repita la posici칩n\r\n            do {\r\n                randomPos = Math.floor(Math.random() * (size * size));\r\n            } while (bombPositions.includes(randomPos));  // Busca una nueva posici칩n si ya est치 ocupada\r\n\r\n            bombPositions.push(randomPos);  // A침adir la nueva posici칩n al array\r\n            newTab[randomPos] = \"游눢\";  // Colocar la bomba en la posici칩n generada\r\n        }\r\n\r\n        return newTab;\r\n    }\r\n\r\n    // Controlador del tama침o del tablero (conjunto de celdas)\r\n    const sizeController = (newSize) => {\r\n        setSize(newSize);  // Actualiza el tama침o del tablero\r\n        console.log(\"El nuevo tama침o es: \" + newSize);\r\n    };\r\n\r\n    // Genera las celdas del tablero\r\n    const [MapValues, setMapValues] = useState(Array(size * size).fill(\" \"));\r\n    const celdas = MapValues.map((value, index) =>\r\n        <Celda key={index} value={value} id={index} addScore={AddScore} />\r\n    );\r\n\r\n    // Funci칩n para empezar el juego\r\n    const btnPlayGame = () => {\r\n        setTime(60);  // Reiniciar el tiempo a 60 segundos\r\n        setReset(true);  // Reiniciar el temporizador\r\n\r\n        // Despu칠s de un ciclo de renderizado, establecemos `Restart` a `false` para permitir futuros reinicios\r\n        setTimeout(() => {\r\n            setReset(false);\r\n        }, 0);  // Este setTimeout con 0 milisegundos asegura que el valor de `Restart` vuelva a `false` inmediatamente despu칠s del renderizado.\r\n\r\n        console.log(\"Timer: \" + MaxTime);\r\n    };\r\n\r\n    // Estado para manejar el puntaje\r\n    const [score, setScore] = useState(0);  // Inicializo el score en 0\r\n\r\n    function AddScore(id) {\r\n        if (Played == false) {\r\n            const cellValue = ValuesTab[id];  // Obtiene el valor de la celda\r\n            console.log(\"cell \" + id + \": \" + cellValue);\r\n\r\n            if (cellValue === \"游눢\") {\r\n                setScore(0);  // Si es una bomba, reinicia el puntaje\r\n                console.log(\"Game Over\");\r\n                GameOver();\r\n            } else {\r\n                if (cellValue !== \" \") {\r\n                    setScore(parseInt(score) + parseInt(cellValue));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function GameOver() {\r\n        setReset(true);  // Establecer el estado a `true` para reiniciar el temporizador\r\n        setTime(0);  // Reiniciar el temporizador\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg-dark rounded-5 mt-5\">\r\n            <div className='bg-warning-subtle text-dark px-5 py-2 rounded-top-5'>\r\n                <h2 className=\"text-center\">Buscaminas</h2>\r\n                <div className='row p-2 rounded-3'>\r\n                    <h2 className='col-6 bg-light border border-black ' id='time'>{time}</h2>\r\n                    <h2 className='col-6 bg-light border border-black ' id='score'>{score + \" pts\"}</h2>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Contenedor del tablero donde se colocan las celdas */}\r\n            <div className='card p-1 mt-5 mb-4 mx-5 '\r\n                id='board' style={{\r\n                    gridTemplateRows: `repeat(${size}, 1fr)`,\r\n                    gridTemplateColumns: `repeat(${size}, 1fr)`,\r\n                }}>\r\n                {celdas}\r\n            </div>\r\n\r\n            <div>\r\n                <Size setBoardSize={sizeController} />\r\n                <button className='btn btn-success px-5 mb-3'\r\n                    onClick={btnPlayGame}>\r\n                    Jugar\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tablero;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}