{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crist\\\\OneDrive\\\\Documentos\\\\Programaci\\xF3n\\\\Programaci\\xF3n Web\\\\Frontend\\\\React\\\\Retos\\\\Reto 1\\\\buscaminas\\\\src\\\\Components\\\\Tablero.js\",\n  _s = $RefreshSig$();\nimport React, { use, useState, useEffect } from 'react';\nimport Celda from './Celda';\nimport Timer from './Timer';\nimport Size from './Proporciones';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tablero() {\n  _s();\n  // Se recibe size como prop correctamente\n\n  const [MaxTime, setTime] = useState(0);\n  const [Played, setReset] = useState(false);\n  const [size, setSize] = useState(5);\n  const [ValuesTab, setValuesTab] = useState(Array(25).fill(\" \"));\n  const time = /*#__PURE__*/_jsxDEV(Timer, {\n    MaxTime: MaxTime,\n    Restart: Played\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 18\n  }, this);\n  let currentSize = size; //variable para que solamente se cambie la proporcion al jugar (si es que se altera en medio del juego por curiosidad o etc...)\n  let pause = true;\n  useEffect(() => {\n    console.log(ValuesTab);\n  }, [ValuesTab]); // Este useEffect se ejecuta cuando Restart o MaxTime cambian\n\n  function RandomBombs() {\n    const bombsCount = Math.floor(Math.random() * size) + 2;\n    console.log(\"Hay \" + bombsCount + \" bombas en el tablero.\");\n    let newTab = Array(size * size).fill(\" \");\n    let bombPositions = [];\n    for (let i = 0; i < bombsCount; i++) {\n      let randomPos;\n\n      // Para que no se repita la posici칩n\n      do {\n        randomPos = Math.floor(Math.random() * (size * size)); // Corregido a \"size\"\n      } while (bombPositions.includes(randomPos)); // Busca una nueva posici칩n si ya est치 ocupada\n\n      bombPositions.push(randomPos); // A침adir la nueva posici칩n al array\n      newTab[randomPos] = \"游눢\"; // Colocar la bomba en la posici칩n generada\n    }\n\n    // Llamada para contar las bombas adyacentes\n    newTab = countAdjacentBombs(newTab);\n    return newTab;\n  }\n  function countAdjacentBombs(tab) {\n    const adjacentOffsets = [-1,\n    // izquierda\n    1,\n    // derecha\n    -size,\n    // arriba\n    size,\n    // abajo\n    -size - 1,\n    // arriba izquierda\n    -size + 1,\n    // arriba derecha\n    size - 1,\n    // abajo izquierda\n    size + 1 // abajo derecha\n    ];\n    for (let i = 0; i < tab.length; i++) {\n      // Solo proceder si la celda no contiene una bomba\n      if (tab[i] !== \"游눢\") {\n        let bombCount = 0;\n\n        // Verificar si la celda est치 en el borde o esquina\n        const row = Math.floor(i / size);\n        const col = i % size;\n\n        // Revisar celdas adyacentes\n        for (let offset of adjacentOffsets) {\n          const adjacentIndex = i + offset;\n\n          // Comprobar si la celda adyacente est치 dentro de los l칤mites del tablero\n          // Verifica si la celda adyacente est치 en la misma fila o no est치 fuera de los l칤mites\n          if (adjacentIndex >= 0 && adjacentIndex < tab.length) {\n            const adjacentRow = Math.floor(adjacentIndex / size);\n            const adjacentCol = adjacentIndex % size;\n\n            // Si es una bomba y est치 dentro del borde, contarla\n            if (tab[adjacentIndex] === \"游눢\" && isValidAdjacent(row, col, adjacentRow, adjacentCol)) {\n              bombCount++;\n            }\n          }\n        }\n\n        // Si hay bombas adyacentes, colocar el n칰mero correspondiente\n        if (bombCount > 0) {\n          tab[i] = bombCount.toString(); // Coloca el n칰mero de bombas adyacentes\n        }\n      }\n    }\n    return tab;\n  }\n  function isValidAdjacent(row, col, adjacentRow, adjacentCol) {\n    // Evitar que se cuenten las posiciones fuera del tablero\n    return Math.abs(row - adjacentRow) <= 1 && Math.abs(col - adjacentCol) <= 1;\n  }\n  const sizeController = newSize => {\n    //Es lo mismo que una funcion pero m치s corto, \"recordar\".\n    currentSize = newSize;\n    // console.log(\"El nuevo size es :\" + currentSize);\n  };\n\n  //Definir pro, valores componente\n  const [MapValues, setMapValues] = useState(Array(size * size).fill(\" \"));\n  const celdas = MapValues.map((value, index) => /*#__PURE__*/_jsxDEV(Celda, {\n    value: value,\n    id: index,\n    addScore: AddScore\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this)); //Agrego la clase playing si se esta jugado\n\n  const btnPlayGame = () => {\n    setSize(currentSize);\n    setMapValues(Array(currentSize * currentSize).fill(\" \")); //curiosamente si dejo size que se actualizo antes, no lo toma a la primera, por ende se dejo con current size\n    setValuesTab(RandomBombs);\n    setTime(60); // Reiniciar el tiempo a 60 segundos\n    setReset(true); // Establecer el estado a `true` para reiniciar el temporizador\n\n    // Despu칠s de un ciclo de renderizado, establecemos `Restart` a `false` para permitir futuros reinicios\n    setTimeout(() => {\n      setReset(false);\n    }, 0); // Este setTimeout con 0 milisegundos asegura que el valor de `Restart` vuelva a `false` inmediatamente despu칠s del renderizado.\n  };\n\n  // Estado para manejar el puntaje\n  const [score, setScore] = useState(0); //Inicializo el score en 0\n\n  function AddScore(id) {\n    //se llama desde celda\n    console.log(Played);\n    if (!Played) {\n      const cellValue = ValuesTab[id]; // Obtiene el valor de la celda\n      console.log(ValuesTab);\n\n      // const cellValue = Tableros[1][id]; // Obtiene el valor de la celda\n      console.log(\"cell \" + id + \": \" + cellValue);\n      viewValue(id);\n      if (cellValue === \"游눢\") {\n        setScore(0); // Si es una bomba, reinicia el puntaje\n        console.log(\"Game Over\");\n        GameOver();\n      } else {\n        if (cellValue !== \" \") {\n          setScore(parseInt(score) + parseInt(cellValue));\n        }\n      }\n    }\n  }\n  function viewValue(id) {\n    //ver valor\n    if (Played) {\n      const valoresNuevos = MapValues.slice();\n      valoresNuevos[id] = ValuesTab[id];\n      // valoresNuevos[id] = Tableros[1][id];\n      console.log(ValuesTab[id]);\n      setMapValues(valoresNuevos);\n\n      // Agregar color de pulsado\n      const cellElement = document.getElementById(id);\n      if (cellElement) {\n        cellElement.classList.add('pulsado');\n      }\n    }\n  }\n\n  //Estado de game over\n  function GameOver() {\n    setReset(true); // Establecer el estado a `true` para reiniciar el temporizador\n    setTime(0);\n    pause = true;\n    // Agregar color de pulsado\n    // const Items = document.getElementById(\"cell\");\n\n    // for (let i = 0; i < Items.length; i++) {\n    //     Items[i].classList.remove('pulsado');\n    // }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-dark rounded-5 mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-warning-subtle text-dark px-5 py-2 rounded-top-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center\",\n        children: \"Buscaminas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row p-2 rounded-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"col-6 bg-light border border-black \",\n          id: \"time\",\n          children: time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"col-6 bg-light border border-black \",\n          id: \"score\",\n          children: score + \" pts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card p-1 mt-5 mb-4 mx-5 \",\n      id: \"board\",\n      style: {\n        gridTemplateRows: `repeat(${size}, 1fr)`,\n        gridTemplateColumns: `repeat(${size}, 0fr)`\n      },\n      children: celdas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Size, {\n        setBoardSize: sizeController\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success px-5 mb-3\",\n        onClick: btnPlayGame,\n        children: \"Jugar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n}\n_s(Tablero, \"DUSS/6JLdOXT3CQlmyaa3F/6iYc=\");\n_c = Tablero;\nexport default Tablero;\nvar _c;\n$RefreshReg$(_c, \"Tablero\");","map":{"version":3,"names":["React","use","useState","useEffect","Celda","Timer","Size","jsxDEV","_jsxDEV","Tablero","_s","MaxTime","setTime","Played","setReset","size","setSize","ValuesTab","setValuesTab","Array","fill","time","Restart","fileName","_jsxFileName","lineNumber","columnNumber","currentSize","pause","console","log","RandomBombs","bombsCount","Math","floor","random","newTab","bombPositions","i","randomPos","includes","push","countAdjacentBombs","tab","adjacentOffsets","length","bombCount","row","col","offset","adjacentIndex","adjacentRow","adjacentCol","isValidAdjacent","toString","abs","sizeController","newSize","MapValues","setMapValues","celdas","map","value","index","id","addScore","AddScore","btnPlayGame","setTimeout","score","setScore","cellValue","viewValue","GameOver","parseInt","valoresNuevos","slice","cellElement","document","getElementById","classList","add","className","children","style","gridTemplateRows","gridTemplateColumns","setBoardSize","onClick","_c","$RefreshReg$"],"sources":["C:/Users/crist/OneDrive/Documentos/Programaci칩n/Programaci칩n Web/Frontend/React/Retos/Reto 1/buscaminas/src/Components/Tablero.js"],"sourcesContent":["import React, { use, useState, useEffect } from 'react';\r\nimport Celda from './Celda';\r\nimport Timer from './Timer';\r\nimport Size from './Proporciones'\r\n\r\nfunction Tablero() { // Se recibe size como prop correctamente\r\n\r\n    const [MaxTime, setTime] = useState(0);\r\n    const [Played, setReset] = useState(false);\r\n    const [size, setSize] = useState(5);\r\n    const [ValuesTab, setValuesTab] = useState(Array(25).fill(\" \"));\r\n\r\n\r\n\r\n    const time = <Timer MaxTime={MaxTime} Restart={Played} />;\r\n    let currentSize = size; //variable para que solamente se cambie la proporcion al jugar (si es que se altera en medio del juego por curiosidad o etc...)\r\n    let pause = true;\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(ValuesTab);\r\n\r\n    }, [ValuesTab]); // Este useEffect se ejecuta cuando Restart o MaxTime cambian\r\n\r\n\r\n    function RandomBombs() {\r\n        const bombsCount = Math.floor(Math.random() * size) + 2;\r\n        console.log(\"Hay \" + bombsCount + \" bombas en el tablero.\");\r\n\r\n        let newTab = Array(size * size).fill(\" \");\r\n        let bombPositions = [];\r\n\r\n        for (let i = 0; i < bombsCount; i++) {\r\n            let randomPos;\r\n\r\n            // Para que no se repita la posici칩n\r\n            do {\r\n                randomPos = Math.floor(Math.random() * (size * size)); // Corregido a \"size\"\r\n            } while (bombPositions.includes(randomPos)); // Busca una nueva posici칩n si ya est치 ocupada\r\n\r\n            bombPositions.push(randomPos); // A침adir la nueva posici칩n al array\r\n            newTab[randomPos] = \"游눢\"; // Colocar la bomba en la posici칩n generada\r\n        }\r\n\r\n        // Llamada para contar las bombas adyacentes\r\n        newTab = countAdjacentBombs(newTab);\r\n        return newTab;\r\n    }\r\n\r\n    function countAdjacentBombs(tab) {\r\n        const adjacentOffsets = [\r\n            -1,  // izquierda\r\n            1,   // derecha\r\n            -size, // arriba\r\n            size,  // abajo\r\n            -size - 1, // arriba izquierda\r\n            -size + 1, // arriba derecha\r\n            size - 1, // abajo izquierda\r\n            size + 1, // abajo derecha\r\n        ];\r\n\r\n        for (let i = 0; i < tab.length; i++) {\r\n            // Solo proceder si la celda no contiene una bomba\r\n            if (tab[i] !== \"游눢\") {\r\n                let bombCount = 0;\r\n\r\n                // Verificar si la celda est치 en el borde o esquina\r\n                const row = Math.floor(i / size);\r\n                const col = i % size;\r\n\r\n                // Revisar celdas adyacentes\r\n                for (let offset of adjacentOffsets) {\r\n                    const adjacentIndex = i + offset;\r\n\r\n                    // Comprobar si la celda adyacente est치 dentro de los l칤mites del tablero\r\n                    // Verifica si la celda adyacente est치 en la misma fila o no est치 fuera de los l칤mites\r\n                    if (adjacentIndex >= 0 && adjacentIndex < tab.length) {\r\n                        const adjacentRow = Math.floor(adjacentIndex / size);\r\n                        const adjacentCol = adjacentIndex % size;\r\n\r\n                        // Si es una bomba y est치 dentro del borde, contarla\r\n                        if (tab[adjacentIndex] === \"游눢\" && isValidAdjacent(row, col, adjacentRow, adjacentCol)) {\r\n                            bombCount++;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Si hay bombas adyacentes, colocar el n칰mero correspondiente\r\n                if (bombCount > 0) {\r\n                    tab[i] = bombCount.toString(); // Coloca el n칰mero de bombas adyacentes\r\n                }\r\n            }\r\n        }\r\n\r\n        return tab;\r\n    }\r\n\r\n    function isValidAdjacent(row, col, adjacentRow, adjacentCol) {\r\n        // Evitar que se cuenten las posiciones fuera del tablero\r\n        return Math.abs(row - adjacentRow) <= 1 && Math.abs(col - adjacentCol) <= 1;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const sizeController = (newSize) => { //Es lo mismo que una funcion pero m치s corto, \"recordar\".\r\n        currentSize = newSize;\r\n        // console.log(\"El nuevo size es :\" + currentSize);\r\n    };\r\n\r\n\r\n\r\n    //Definir pro, valores componente\r\n    const [MapValues, setMapValues] = useState(Array(size * size).fill(\" \"));\r\n    const celdas = MapValues.map((value, index) =>\r\n        <Celda key={index} value={value} id={index}\r\n            addScore={AddScore} />); //Agrego la clase playing si se esta jugado\r\n\r\n\r\n\r\n\r\n    const btnPlayGame = () => {\r\n\r\n        setSize(currentSize);\r\n\r\n        setMapValues(Array(currentSize * currentSize).fill(\" \")); //curiosamente si dejo size que se actualizo antes, no lo toma a la primera, por ende se dejo con current size\r\n        setValuesTab(RandomBombs);\r\n\r\n        setTime(60);  // Reiniciar el tiempo a 60 segundos\r\n        setReset(true);  // Establecer el estado a `true` para reiniciar el temporizador\r\n\r\n        // Despu칠s de un ciclo de renderizado, establecemos `Restart` a `false` para permitir futuros reinicios\r\n        setTimeout(() => {\r\n            setReset(false);\r\n        }, 0);  // Este setTimeout con 0 milisegundos asegura que el valor de `Restart` vuelva a `false` inmediatamente despu칠s del renderizado.\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n    // Estado para manejar el puntaje\r\n    const [score, setScore] = useState(0); //Inicializo el score en 0\r\n\r\n    function AddScore(id) { //se llama desde celda\r\n        console.log(Played);\r\n        if (!Played) {\r\n\r\n            const cellValue = ValuesTab[id]; // Obtiene el valor de la celda\r\n            console.log(ValuesTab);\r\n\r\n            // const cellValue = Tableros[1][id]; // Obtiene el valor de la celda\r\n            console.log(\"cell \" + id + \": \" + cellValue);\r\n            viewValue(id);\r\n\r\n            if (cellValue === \"游눢\") {\r\n                setScore(0); // Si es una bomba, reinicia el puntaje\r\n                console.log(\"Game Over\");\r\n                GameOver();\r\n            }\r\n            else {\r\n                if (cellValue !== \" \") {\r\n                    setScore(parseInt(score) + parseInt(cellValue));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function viewValue(id) { //ver valor\r\n        if (Played) {\r\n            const valoresNuevos = MapValues.slice();\r\n            valoresNuevos[id] = ValuesTab[id];\r\n            // valoresNuevos[id] = Tableros[1][id];\r\n            console.log(ValuesTab[id])\r\n            setMapValues(valoresNuevos);\r\n\r\n            // Agregar color de pulsado\r\n            const cellElement = document.getElementById(id);\r\n            if (cellElement) {\r\n                cellElement.classList.add('pulsado');\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //Estado de game over\r\n    function GameOver() {\r\n        setReset(true);  // Establecer el estado a `true` para reiniciar el temporizador\r\n        setTime(0);\r\n        pause = true;\r\n        // Agregar color de pulsado\r\n        // const Items = document.getElementById(\"cell\");\r\n\r\n        // for (let i = 0; i < Items.length; i++) {\r\n        //     Items[i].classList.remove('pulsado');\r\n        // }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"bg-dark rounded-5 mt-5\">\r\n            <div className='bg-warning-subtle text-dark px-5 py-2 rounded-top-5'>\r\n                <h2 className=\"text-center\">Buscaminas</h2>\r\n                <div className='row p-2 rounded-3'>\r\n                    <h2 className='col-6 bg-light border border-black ' id='time'>{time}</h2>\r\n                    <h2 className='col-6 bg-light border border-black ' id='score'>{score + \" pts\"}</h2>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Contenedor del tablero donde se colocan las celdas */}\r\n            <div className='card p-1 mt-5 mb-4 mx-5 '\r\n                id='board' style={{\r\n                    gridTemplateRows: `repeat(${size}, 1fr)`,\r\n                    gridTemplateColumns: `repeat(${size}, 0fr)`,\r\n                }}>\r\n                {celdas}\r\n            </div>\r\n            <div>\r\n                <Size setBoardSize={sizeController} />\r\n\r\n                <button className='btn btn-success px-5 mb-3'\r\n                    onClick={btnPlayGame}>\r\n                    Jugar\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tablero;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}